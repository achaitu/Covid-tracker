{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","pathOptions","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","ChangeMap","zoom","useMap","setView","Map","countries","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor","App","setCountries","setcountry","setcountryInfo","mapCountries","setmapCountries","tableData","settableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","getCountriesData","name","iso2","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d4550a3.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport { Circle, Popup } from \"react-leaflet\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 200,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 300,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 500,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      pathOptions={{\n        color: casesTypeColors[casesType].hex,\n        fillColor: casesTypeColors[casesType].hex,\n      }}\n      //   color={casesTypeColors[casesType].hex}\n      //   fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport \"./Map.css\";\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\nimport { showDataOnMap } from \"./util\";\n\nfunction ChangeMap({ center, zoom }) {\n  const map = useMap();\n  map.setView(center, zoom);\n  return null;\n}\n\nfunction Map({ countries, casesType, center, zoom }) {\n  //   console.log(\"oooo\", countries, casesType);\n  return (\n    <div className=\"map\">\n      <LeafletMap>\n        <ChangeMap center={center} zoom={zoom} />\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {/* {console.log(\"oo\", countries, casesType)} */}\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n\n// import { MapContainer as LeafletMap,TileLayer,useMap } from \"react-leaflet\";\n// function ChangeMap({ center, zoom }) {\n//   const map = useMap();\n//   map.setView(center, zoom);\n//   return null;\n// }\n\n// function Map({ center, zoom }) {\n//   return (\n//     <div className=\"map\">\n//       <LeafletMap>\n//         <ChangeMap center={center} zoom={zoom} />\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//           attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n//         ></TileLayer>\n//       </LeafletMap>\n//     </div>\n//   );\n// }\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr className=\"table__row\">\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")} </strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import { borderColor } from \"@mui/system\";\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  //   console.log(\"oka\", chartData);\n  return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => response.json())\n        .then((data) => {\n          //   console.log(\"last try\", data, casesType);\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          //   console.log(\"logging\", chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  Card,\n  FormControl,\n  MenuItem,\n  Select,\n  CardContent,\n} from \"@mui/material\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setcountry] = useState(\"worldwide\");\n  const [countryInfo, setcountryInfo] = useState({});\n  const [mapCountries, setmapCountries] = useState([]);\n  const [tableData, settableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setcountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          settableData(sortedData);\n          setmapCountries(data);\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  // console.log(\"okay here\", mapCountries);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    // console.log(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setcountry(countryCode);\n        setcountryInfo(data);\n        countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        countryCode === \"worldwide\" ? setMapZoom(3) : setMapZoom(4);\n      });\n  };\n  // console.log(\"hey hye\", countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        {/* header */}\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}> {country.name} </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        {/* Infoboxes */}\n        <div className=\"app__stats\">\n          <InfoBox\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}